// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuseumManagement.Infrastructure.Persistence.Contexts;

#nullable disable

namespace MuseumManagement.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MuseumManagement.Domain.Artifacts.Entities.Artifact", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Biodegradability")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewMuseumNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldMuseumNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafeId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimePeriodId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("SafeId");

                    b.HasIndex("TimePeriodId");

                    b.ToTable("Artifacts", "Main");
                });

            modelBuilder.Entity("MuseumManagement.Domain.Artifacts.Entities.ArtifactImage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ArtifactId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtifactId");

                    b.ToTable("ArtifactImages", "Main");
                });

            modelBuilder.Entity("MuseumManagement.Domain.Artifacts.Entities.ArtifactMaterial", b =>
                {
                    b.Property<string>("ArtifactId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("MaterialId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsImportantMaterial")
                        .HasColumnType("bit");

                    b.HasKey("ArtifactId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("ArtifactMaterials", "Main");
                });

            modelBuilder.Entity("MuseumManagement.Domain.Materials.Entities.Material", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Materials", "Main");
                });

            modelBuilder.Entity("MuseumManagement.Domain.Safes.Entities.Safe", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StowageId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("StowageId");

                    b.ToTable("Safes", "Main");
                });

            modelBuilder.Entity("MuseumManagement.Domain.Stowages.Entities.Stowage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stowages", "Main");
                });

            modelBuilder.Entity("MuseumManagement.Domain.TimePeriods.Entities.TimePeriod", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TimePeriods", "Main");
                });

            modelBuilder.Entity("MuseumManagement.Domain.Artifacts.Entities.Artifact", b =>
                {
                    b.HasOne("MuseumManagement.Domain.Safes.Entities.Safe", "Safe")
                        .WithMany("Artifacts")
                        .HasForeignKey("SafeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MuseumManagement.Domain.TimePeriods.Entities.TimePeriod", "TimePeriod")
                        .WithMany("Artifacts")
                        .HasForeignKey("TimePeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Safe");

                    b.Navigation("TimePeriod");
                });

            modelBuilder.Entity("MuseumManagement.Domain.Artifacts.Entities.ArtifactImage", b =>
                {
                    b.HasOne("MuseumManagement.Domain.Artifacts.Entities.Artifact", "Artifact")
                        .WithMany("ArtifactImages")
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artifact");
                });

            modelBuilder.Entity("MuseumManagement.Domain.Artifacts.Entities.ArtifactMaterial", b =>
                {
                    b.HasOne("MuseumManagement.Domain.Artifacts.Entities.Artifact", "Artifact")
                        .WithMany("ArtifactMaterials")
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuseumManagement.Domain.Materials.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artifact");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("MuseumManagement.Domain.Safes.Entities.Safe", b =>
                {
                    b.HasOne("MuseumManagement.Domain.Stowages.Entities.Stowage", "Stowage")
                        .WithMany("Safes")
                        .HasForeignKey("StowageId");

                    b.Navigation("Stowage");
                });

            modelBuilder.Entity("MuseumManagement.Domain.Artifacts.Entities.Artifact", b =>
                {
                    b.Navigation("ArtifactImages");

                    b.Navigation("ArtifactMaterials");
                });

            modelBuilder.Entity("MuseumManagement.Domain.Safes.Entities.Safe", b =>
                {
                    b.Navigation("Artifacts");
                });

            modelBuilder.Entity("MuseumManagement.Domain.Stowages.Entities.Stowage", b =>
                {
                    b.Navigation("Safes");
                });

            modelBuilder.Entity("MuseumManagement.Domain.TimePeriods.Entities.TimePeriod", b =>
                {
                    b.Navigation("Artifacts");
                });
#pragma warning restore 612, 618
        }
    }
}
